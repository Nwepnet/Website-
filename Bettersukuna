-- Local player and services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- Function to update move names
local function updateMoveNames()
    local skillOne = player.PlayerGui.Main.Moveset['Cursed Strikes'].ItemName
    local skillTwo = player.PlayerGui.Main.Moveset['Crushing Blow'].ItemName
    local skillThree = player.PlayerGui.Main.Moveset['Divergent Fist'].ItemName
    local ultTitle = player.PlayerGui.Main.Ultimate.Title

    -- Update GUI names
    skillOne.Text = "Heian Strikes"      -- Move 1 name
    skillTwo.Text = "Dismantling Grasp" -- Move 2 name
    skillThree.Text = "Kokusen"         -- Move 3 name
    ultTitle.Text = "Kamutoke." -- Ultimate name
end

-- Shared Configurable Parameters
local isAnimationSequenceActive = false
local moveCooldown = {move1 = false, move2 = false, move3 = false} -- Track cooldowns for each move

-- Helper function to stop and reset animation sequences
local function stopAnimationSequence(humanoid, animTracks)
    for _, track in pairs(animTracks) do
        track:Stop()
    end
    isAnimationSequenceActive = false -- Reset the animation sequence flag
end

-- Helper function to play animation sequence for each skill
local function playAnimationSequence(humanoid, animationsToPlay, playDuration, cooldownKey)
    if isAnimationSequenceActive or moveCooldown[cooldownKey] then return end
    isAnimationSequenceActive = true
    moveCooldown[cooldownKey] = true -- Set the move on cooldown

    local animTracks = {}
    -- Load the animations
    for name, animation in pairs(animationsToPlay) do
        local animInstance = Instance.new("Animation")
        animInstance.AnimationId = animation.AnimationId
        animTracks[name] = humanoid:LoadAnimation(animInstance)
    end

    -- Stop all current animations immediately (prevents overlapping)
    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        track:Stop()
    end

    -- Play the animation sequence
    task.spawn(function()
        for _, animTrack in pairs(animTracks) do
            animTrack:Play()
            task.wait(playDuration) -- Wait for the specified duration
            animTrack:Stop() -- Stop animation after duration
        end

        -- Reset the cooldown after the animation finishes
        task.wait(1) -- Wait for the full cooldown time
        moveCooldown[cooldownKey] = false -- Reset cooldown flag

        -- Ensure all animations are stopped and reset the flag
        stopAnimationSequence(humanoid, animTracks)
    end)
end

-- Skill Handlers

-- Skill 1: Heian Strikes
local function handleSkill1(humanoid)
    local animations = {
        wideStrike1 = ReplicatedStorage.Animations.Mahito.WideStrike,
        wideStrike2 = ReplicatedStorage.Animations.Mahito.WideStrike,
        slicingExorcism = ReplicatedStorage.Animations.Choso.SlicingExorcism
    }

    -- Play the animations for 0.80 seconds before stopping
    playAnimationSequence(humanoid, animations, 1, "move1")
end

-- Skill 2: Dismantling Grasp
local function handleSkill2(humanoid)
    local animations = {
        forceGrab = ReplicatedStorage.Animations.Mahito.ForceGrab,
        slaughterDemon = ReplicatedStorage.Animations.Gojo.Teleport

    -- Play the animations for 1 second before stopping
    playAnimationSequence(humanoid, animations, 1.0, "move2")
end

-- Skill 3: Kokusen
local function handleSkill3(humanoid)
    local animations = {
        roughEnergy = ReplicatedStorage.Animations.Hakari.RoughEnergy
    }

    -- Play the animations for 1.60 seconds before stopping
    playAnimationSequence(humanoid, animations, 1.60, "move3")
end

-- Function to initialize the script
local function initialize()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Update move names on character load
    updateMoveNames()

    -- Connect skill triggers
    humanoid.AnimationPlayed:Connect(function(animationTrack)
        if animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.CursedStrike.AnimationId then
            handleSkill1(humanoid)
        elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.CrushingBlow.AnimationId then
            handleSkill2(humanoid)
        elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.Variants.DivergentFist1.AnimationId then
            handleSkill3(humanoid)
        end
    end)
end

-- Regenerate the script and update move names on respawn
player.CharacterAdded:Connect(function()
    -- Wait to ensure the character is fully loaded
    task.wait(0.5)
    initialize()
end)

-- Initial setup
initialize()
