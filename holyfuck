-- Local player and services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- Function to update move names
local function updateMoveNames()
    local playerGui = player.PlayerGui:FindFirstChild("Main")
    if playerGui then
        local moveset = playerGui:FindFirstChild("Moveset")
        if moveset then
            local skillOne = moveset:FindFirstChild("Cursed Strikes")
            local skillTwo = moveset:FindFirstChild("Crushing Blow")
            local skillThree = moveset:FindFirstChild("Divergent Fist")
            local skillFour = moveset:FindFirstChild("Manji Kick") -- Original name for Skill 4
            local ultTitle = playerGui:FindFirstChild("Ultimate"):FindFirstChild("Title")

            if skillOne then skillOne.ItemName.Text = "Heian Strikes" end
            if skillTwo then skillTwo.ItemName.Text = "Dismantling Grasp" end
            if skillThree then skillThree.ItemName.Text = "Kokusen" end
            if skillFour then skillFour.ItemName.Text = "Adapted" end -- Updated name for Skill 4
            if ultTitle then ultTitle.Text = "Kamutoke." end
        end
    end
end

-- Shared Configurable Parameters
local isAnimationSequenceActive = false
local moveCooldown = {move1 = false, move2 = false, move3 = false, move4 = false} -- Track cooldowns for each move

-- Helper function to stop and reset animation sequences
local function stopAnimationSequence(humanoid, animTracks)
    for _, track in pairs(animTracks) do
        track:Stop()
    end
    isAnimationSequenceActive = false -- Reset the animation sequence flag
end

-- Helper function to play animation sequence for each skill
local function playAnimationSequence(humanoid, animationsToPlay, playDurations, cooldownKey, onComplete, transitionDelay, repeatCount)
    if isAnimationSequenceActive or moveCooldown[cooldownKey] then return end
    isAnimationSequenceActive = true
    moveCooldown[cooldownKey] = true -- Set the move on cooldown

    local animTracks = {}
    transitionDelay = transitionDelay or 0.1 -- Default delay between transitions
    repeatCount = repeatCount or 1 -- Default repeat count

    -- Load the animations in order
    for _, animation in ipairs(animationsToPlay) do
        local animInstance = Instance.new("Animation")
        animInstance.AnimationId = animation.AnimationId
        table.insert(animTracks, humanoid:LoadAnimation(animInstance))
    end

    -- Stop all current animations immediately (prevents overlapping)
    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        track:Stop()
    end

    -- Play the animation sequence in order
    task.spawn(function()
        for _ = 1, repeatCount do
            for index, animTrack in ipairs(animTracks) do
                animTrack:Play()
                task.wait(playDurations[index] - transitionDelay) -- Adjust duration with overlap
                animTrack:Stop() -- Stop animation after duration
            end
        end

        -- Trigger the VFX after the animation starts
        if onComplete then
            onComplete()
        end

        -- Reset the cooldown after the animation finishes
        task.wait(1) -- Wait for the full cooldown time
        moveCooldown[cooldownKey] = false -- Reset cooldown flag

        -- Ensure all animations are stopped and reset the flag
        stopAnimationSequence(humanoid, animTracks)
    end)
end

-- Function to trigger VFX
local function triggerVFX()
    if player.Character:FindFirstChild("HumanoidRootPart") then
        local attach = Instance.new("Attachment")
        local particles = Instance.new("ParticleEmitter")

        attach.Name = "TOKYOISSOKIDI"
        attach.Parent = player.Character.HumanoidRootPart
        attach.Position = Vector3.new(0, 0, -3)

        particles.Brightness = 5
        particles.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), 
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
        })
        particles.Drag = 3
        particles.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
        particles.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
        particles.Lifetime = NumberRange.new(0.8)
        particles.LightEmission = -1
        particles.LockedToPart = true
        particles.Rate = 10
        particles.Size = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 5),
            NumberSequenceKeypoint.new(1, 10)
        })
        particles.Speed = NumberRange.new(0)
        particles.Texture = "rbxassetid://16028033353"
        particles.Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(0.2, 0.49),
            NumberSequenceKeypoint.new(0.5, 0.51),
            NumberSequenceKeypoint.new(0.8, 0.49),
            NumberSequenceKeypoint.new(1, 1)
        })
        particles.ZOffset = -1
        particles.Parent = attach

        particles.Enabled = true
        wait(0.80)
        particles.Enabled = false
    end
end

-- Skill Variants Table
local moveVariants = {
    move1 = {
        { -- Variant 1: Normal
            animations = {
                ReplicatedStorage.Animations.Mahito.FocusStrike,
                ReplicatedStorage.Animations.Choso.SlicingExorcism,
                ReplicatedStorage.Animations.Megumi.Melee.Melee1,
                ReplicatedStorage.Animations.Megumi.Melee.Melee2,
                ReplicatedStorage.Animations.Megumi.Melee.Melee3,
                ReplicatedStorage.Animations.Megumi.Melee.Melee4
            },
            durations = {0.7, 0.7, 0.5, 0.5, 0.5, 0.5}
        },
        { -- Variant 2: Drill Split + Lucky Volley
            animations = {
                ReplicatedStorage.Animations.Mahito.DrillSplit,
                ReplicatedStorage.Animations.Hakari.LuckyVolley
            },
            durations = {0.6, 0.8}, -- Lucky Volley is sped up
            repeatCount = 2 -- Lucky Volley repeats twice
        }
    },
    move2 = {
        { -- Variant 1: Normal
            animations = {
                ReplicatedStorage.Animations.Mahito.ForceGrab,
                ReplicatedStorage.Animations.Mahito.ForceGrab
            },
            durations = {1, 1}
        }
    },
    move3 = {
        { -- Variant 1: Normal
            animations = {ReplicatedStorage.Animations.Megumi.Mahoraga.Takedown},
            durations = {2.5}
        },
        { -- Variant 2: Rough Energy
            animations = {ReplicatedStorage.Animations.Hakari.RoughEnergy},
            durations = {1.5}
        },
        { -- Variant 3: Energy Surge
            animations = {ReplicatedStorage.Animations.Hakari.EnergySurge},
            durations = {1.8}
        }
    },
    move4 = {
        { -- Force Variant for Adapted
            animations = {
                ReplicatedStorage.Animations.Megumi.Mahoraga.Adaptation,
                ReplicatedStorage.Animations.Megumi.Mahoraga.Earthquake
            },
            durations = {0.7, 0.8}
        }
    }
}

-- Skill Handlers
local function handleSkill(humanoid, moveKey)
    local variants = moveVariants[moveKey]
    if not variants then return end

    local variant = variants[math.random(1, #variants)] -- Randomly pick a variant
    playAnimationSequence(humanoid, variant.animations, variant.durations, moveKey, triggerVFX, 0.1, variant.repeatCount or 1)
end

-- Function to initialize the script
local function initialize()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    updateMoveNames()

    humanoid.AnimationPlayed:Connect(function(animationTrack)
        if animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.CursedStrike.AnimationId then
            handleSkill(humanoid, "move1")
        elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.CrushingBlow.AnimationId then
            handleSkill(humanoid, "move2")
        elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.Variants.DivergentFist1.AnimationId then
            handleSkill(humanoid, "move3")
        elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.ManjiKick.AnimationId then
            handleSkill(humanoid, "move4")
        end
    end)
end

-- Regenerate the script and update move names on respawn
player.CharacterAdded:Connect(function()
    task.wait(0.5)
    initialize()
end)

-- Initial setup
initialize()
