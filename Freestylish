-- Local player and services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- GUI Elements
local skillOne = player.PlayerGui.Main.Moveset['Cursed Strikes'].ItemName
local skillTwo = player.PlayerGui.Main.Moveset['Crushing Blow'].ItemName
local skillThree = player.PlayerGui.Main.Moveset['Divergent Fist'].ItemName
local ultTitle = player.PlayerGui.Main.Ultimate.Title

-- Update GUI
skillOne.Text = "Barrage"
skillTwo.Text = "Sweeps"
skillThree.Text = "Dropkick"
ultTitle.Text = "Power Of Foolishness"

-- Shared Configurable Parameters
local SWAP_DELAY = 0.01
local PLAY_DURATION = 1.2
local isAnimationSequenceActive = false

-- Helper function to play the animation sequence
local function playAnimationSequence(player, animationsToPlay, playDuration)
    if isAnimationSequenceActive then return end
    isAnimationSequenceActive = true

    local character = player.Character
    if not character then return end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local animTracks = {}
    local isAnimationPlaying = {}

    -- Create animation tracks
    for name, animation in pairs(animationsToPlay) do
        local animInstance = Instance.new("Animation")
        animInstance.AnimationId = animation.AnimationId
        animTracks[name] = humanoid:LoadAnimation(animInstance)
        isAnimationPlaying[name] = false
    end

    -- Stop all current animations immediately (prevents overlapping)
    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        track:Stop()
    end

    -- Flag to track if all animations are completed
    local allAnimationsCompleted = false

    -- Play animations sequentially and ensure they stop immediately after each one
    task.spawn(function()
        for name, animTrack in pairs(animTracks) do
            -- Play animation only if it's not already playing
            if not isAnimationPlaying[name] then
                animTrack:Play()
                task.wait(playDuration * 0.75)  -- Speed up the wait time to 75% of total play duration
                animTrack:Stop()  -- Stop the animation immediately after it plays
                isAnimationPlaying[name] = true
            end
        end

        -- After all animations are played, stop all of them and reset the flag
        allAnimationsCompleted = true

        -- Stop all animations after the sequence
        for _, track in pairs(animTracks) do
            track:Stop()  -- Ensure no animations are left running
        end

        -- Reset the flag to allow the next sequence to run
        isAnimationSequenceActive = false
    end)
end

-- Skill Handlers
local function handleSkill1(player)
    local animations = {
        roughEnergy = ReplicatedStorage.Animations.Hakari.RoughEnergy,
        luckyVolley1 = ReplicatedStorage.Animations.Hakari.LuckyVolley,
        luckyVolley2 = ReplicatedStorage.Animations.Hakari.LuckyVolley,
        slicingExorcism = ReplicatedStorage.Animations.Choso.SlicingExorcism -- Choso's SlicingExorcism for Skill 1
    }
    playAnimationSequence(player, animations, PLAY_DURATION)
end

local function handleSkill2(player)
    local animations = {
        megumiMelee4 = ReplicatedStorage.Animations.Megumi.Melee.Melee4,  -- Using Megumi's Melee.Melee4
        megumiMelee2 = ReplicatedStorage.Animations.Megumi.Melee.Melee2   -- Using Megumi's Melee.Melee2
    }
    playAnimationSequence(player, animations, 0.8)
end

local function handleSkill3(player)
    local animations = {
        drillSplit = ReplicatedStorage.Animations.Mahito.DrillSplit
    }
    playAnimationSequence(player, animations, 1)
end

-- Connect Animation Events
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

humanoid.AnimationPlayed:Connect(function(animationTrack)
    if animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.CursedStrike.AnimationId then
        handleSkill1(player)
    elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.CrushingBlow.AnimationId then
        handleSkill2(player)
    elseif animationTrack.Animation.AnimationId == ReplicatedStorage.Animations.Itadori.Variants.DivergentFist1.AnimationId then
        handleSkill3(player)
    end
end)

-- Play Hakari.Rhythm animation on respawn
player.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")

    -- Wait for the character's humanoid to load, then play the Hakari.Rhythm animation
    local hakariRhythmAnim = Instance.new("Animation")
    hakariRhythmAnim.AnimationId = "rbxassetid://<AnimationID>"  -- Replace <AnimationID> with the actual ID of Hakari.Rhythm
    local animTrack = humanoid:LoadAnimation(hakariRhythmAnim)

    animTrack:Play()

    -- Ensure the animation stops after a certain time (or you can choose to stop it when needed)
    task.wait(2)  -- Play the rhythm for 2 seconds (adjust time as necessary)
    animTrack:Stop()
end)
